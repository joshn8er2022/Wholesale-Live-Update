generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(CLIENT)
  companyName   String?
  firstName     String?
  lastName      String?
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  zip           String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  bulkPurchases BulkPurchase[]
  patientLinks  PatientLink[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BulkPurchase {
  id                String               @id @default(cuid())
  userId            String
  shopifyOrderId    String               @unique
  shopifyOrderNumber String
  productSku        String
  productTitle      String
  productId         String
  variantId         String?
  variantTitle      String?
  quantityPurchased Int
  quantityRemaining Int
  unitCost          Float
  totalCost         Float
  customerName      String
  customerEmail     String
  billingName       String?
  billingAddress    String?
  shippingName      String?
  shippingAddress   String?
  orderDate         DateTime
  status            PurchaseStatus       @default(ACTIVE)
  discountCode      String?              @unique
  customLink        String?              @unique
  notes             String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  
  user              User                 @relation(fields: [userId], references: [id])
  productScheme     ProductScheme        @relation(fields: [productSku], references: [sku])
  patientLinks      PatientLink[]
  fulfillments      PatientFulfillment[]

  @@index([productSku])
  @@index([shopifyOrderId])
  @@index([userId])
}

model ProductScheme {
  id               String          @id @default(cuid())
  sku              String          @unique
  title            String
  description      String?
  shopifyProductId String
  shopifyVariantId String?
  unitPrice        Float
  bulkPrice        Float
  minimumBulkQty   Int             @default(10)
  maxUnitsPerLink  Int             @default(1)
  isActive         Boolean         @default(true)
  categoryId       String?
  tags             Json?
  image            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  category         ProductCategory? @relation(fields: [categoryId], references: [id])
  bulkPurchases    BulkPurchase[]
  patientLinks     PatientLink[]

  @@index([sku])
  @@index([shopifyProductId])
}

model ProductCategory {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  products    ProductScheme[]
}

model PatientLink {
  id               String               @id @default(cuid())
  userId           String
  bulkPurchaseId   String
  productSchemeId  String
  linkToken        String               @unique
  customUrl        String               @unique
  discountCode     String
  maxUses          Int                  @default(1)
  currentUses      Int                  @default(0)
  isActive         Boolean              @default(true)
  expiresAt        DateTime?
  patientEmail     String?
  patientName      String?
  notes            String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  
  user             User                 @relation(fields: [userId], references: [id])
  bulkPurchase     BulkPurchase         @relation(fields: [bulkPurchaseId], references: [id])
  productScheme    ProductScheme        @relation(fields: [productSchemeId], references: [id])
  fulfillments     PatientFulfillment[]

  @@index([linkToken])
  @@index([bulkPurchaseId])
  @@index([userId])
}

model PatientFulfillment {
  id               String        @id @default(cuid())
  patientLinkId    String
  bulkPurchaseId   String
  shopifyOrderId   String?
  patientEmail     String
  patientName      String?
  quantityFulfilled Int          @default(1)
  fulfillmentDate  DateTime      @default(now())
  ipAddress        String?
  userAgent        String?
  notes            String?
  createdAt        DateTime      @default(now())
  
  patientLink      PatientLink   @relation(fields: [patientLinkId], references: [id])
  bulkPurchase     BulkPurchase  @relation(fields: [bulkPurchaseId], references: [id])

  @@index([patientLinkId])
  @@index([bulkPurchaseId])
  @@index([patientEmail])
}

model ShopifyOrderSync {
  id            String      @id @default(cuid())
  shopifyOrderId String    @unique
  orderNumber   String
  syncedAt      DateTime    @default(now())
  orderData     Json
  processed     Boolean     @default(false)
  error         String?
  createdAt     DateTime    @default(now())
  
  @@index([shopifyOrderId])
  @@index([processed])
}

enum UserRole {
  ADMIN
  CLIENT
  PATIENT
}

enum PurchaseStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}
